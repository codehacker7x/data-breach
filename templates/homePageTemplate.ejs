<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recent Data Breaches</title>

    <%- include('/head.ejs') %>

</head>

<body>
    <%- include("/header.ejs") %>
        <main class="homeMain">
            <section class="hero">
                <div>
                    <div class="title header">
                        <h1>Recent Data Breaches</h1>
                        <p>Here are the most recent breaches that have been reported. You can subscribe to receive
                            weekly updates on
                            new and existing breaches.</p>
                        <div class="search" id="search-container">
                            <input type="search" id="searchBox"
                                placeholder="Search by Organization, Threat Actor, or Industry...">
                        </div>
                    </div>
                </div>
            </section>
            <section class="page-content" id="content">
                <div class="page-content-inner">
                    <table id="breachesTable">
                        <thead>
                            <tr>
                                <th>Severity</th>
                                <th>Organization</th>
                                <th>Threat Actor</th>
                                <th>Date Reported</th>
                                <th>Industry</th>
                                <th>Country</th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                            <% data.forEach(function(category) { %>
                                <% category.pages.forEach(function(breach) { %>
                                    <tr onclick="window.location.href='<%= breach.slug %>'" style="cursor: pointer;">
                                        <td>
                                            <% let severityClass='' ; let severityNum=0; try {
                                                severityNum=parseInt(breach.Severity.split('/')[0]); } catch (error) {
                                                console.log(breach.Organization, error); } if (severityNum>= 7) {
                                                severityClass = 'high';
                                                } else if (severityNum >= 4) {
                                                severityClass = 'medium';
                                                } else {
                                                severityClass = 'low';
                                                }
                                                %>
                                                <span class="severity <%= severityClass %>">
                                                    <%= breach.Severity %>
                                                </span>
                                        </td>
                                        <td>
                                            <%= breach.Organization %>
                                        </td>
                                        <td>
                                            <%= breach.ThreatActor %>
                                        </td>
                                        <td>
                                            <%= breach.DateReported %>
                                        </td>
                                        <td>
                                            <%= breach.Industry %>
                                        </td>
                                        <td>
                                            <%= breach.Country %>
                                        </td>
                                    </tr>
                                    <% }); %>
                                        <% }); %>
                        </tbody>
                    </table>

                    <ul class="pagination">
                        <li>
                            <a href="#" id="firstPage">&laquo;</a>
                        </li>

                        <li>
                            <a href="#" id="prevPage">&lsaquo;</a>
                        </li>
                        <li id="paginationNumbers"></li>
                        <li>
                            <a href="#" id="nextPage">&rsaquo;</a>
                        </li>
                        <li>
                            <a href="#" id="lastPage">&raquo;</a>
                        </li>
                    </ul>
                </div>
            </section>
        </main>
        <%- include("/footer.ejs") %>

            <script>
                // Pagination configuration
                const rowsPerPage = 15;
                let currentPage = 1;
                let totalRows = 0;

                // Add pagination functionality
                function paginateTable() {
                    const table = document.getElementById("breachesTable");
                    const rows = table.getElementsByTagName("tr");
                    totalRows = rows.length - 1; // Exclude the header

                    const start = (currentPage - 1) * rowsPerPage + 1; // 1 for header row
                    const end = start + rowsPerPage;

                    for (let i = 1; i < rows.length; i++) { // Skip header row
                        if (i >= start && i < end) {
                            rows[i].style.display = "";
                        } else {
                            rows[i].style.display = "none";
                        }
                    }

                    updatePaginationNumbers();
                }

                // Update pagination buttons based on total rows and current page
                function updatePaginationNumbers() {
                    const paginationNumbers = document.getElementById("paginationNumbers");
                    paginationNumbers.innerHTML = ""; // Clear current numbers

                    const totalPages = Math.ceil(totalRows / rowsPerPage);

                    // Disable or enable the navigation buttons based on the current page
                    document.getElementById("firstPage").classList.toggle("disabled", currentPage === 1);
                    document.getElementById("prevPage").classList.toggle("disabled", currentPage === 1);
                    document.getElementById("nextPage").classList.toggle("disabled", currentPage === totalPages);
                    document.getElementById("lastPage").classList.toggle("disabled", currentPage === totalPages);

                    // Show nearby pages (currentPage and surrounding pages)
                    const nearbyPages = 2; // Number of pages to show before and after the current page
                    for (let i = Math.max(1, currentPage - nearbyPages); i <= Math.min(totalPages, currentPage + nearbyPages); i++) {
                        const pageLink = document.createElement("a");
                        pageLink.href = "#";
                        pageLink.innerText = i;
                        pageLink.classList.add("pageNumber");
                        if (i === currentPage) {
                            pageLink.classList.add("active");
                        }
                        pageLink.addEventListener("click", function () {
                            currentPage = i;
                            paginateTable();
                        });

                        const pageItem = document.createElement("li");
                        pageItem.appendChild(pageLink);
                        paginationNumbers.appendChild(pageItem);
                    }
                }

                // Event listeners for First, Previous, Next, and Last buttons
                document.getElementById("firstPage").addEventListener("click", function () {
                    if (currentPage !== 1) {
                        currentPage = 1;
                        paginateTable();
                    }
                });

                document.getElementById("prevPage").addEventListener("click", function () {
                    if (currentPage > 1) {
                        currentPage--;
                        paginateTable();
                    }
                });

                document.getElementById("nextPage").addEventListener("click", function () {
                    const totalPages = Math.ceil(totalRows / rowsPerPage);
                    if (currentPage < totalPages) {
                        currentPage++;
                        paginateTable();
                    }
                });

                document.getElementById("lastPage").addEventListener("click", function () {
                    const totalPages = Math.ceil(totalRows / rowsPerPage);
                    if (currentPage !== totalPages) {
                        currentPage = totalPages;
                        paginateTable();
                    }
                });

                // Initial pagination setup
                window.onload = function () {
                    paginateTable();
                };
                // Search box functionality
                document.getElementById('searchBox').addEventListener('keyup', function () {
                    var input, filter, table, tr, td, i, txtValue;
                    input = document.getElementById("searchBox");
                    filter = input.value.toUpperCase();
                    table = document.getElementById("breachesTable");
                    tr = table.getElementsByTagName("tr");

                    for (i = 1; i < tr.length; i++) { // Start at 1 to skip the header
                        tdOrganization = tr[i].getElementsByTagName("td")[1];
                        tdThreatActor = tr[i].getElementsByTagName("td")[2];
                        tdIndustry = tr[i].getElementsByTagName("td")[4];
                        if (tdOrganization || tdThreatActor || tdIndustry) {
                            txtValueOrg = tdOrganization.textContent || tdOrganization.innerText;
                            txtValueThreat = tdThreatActor.textContent || tdThreatActor.innerText;
                            txtValueIndustry = tdIndustry.textContent || tdIndustry.innerText;
                            if (txtValueOrg.toUpperCase().indexOf(filter) > -1 ||
                                txtValueThreat.toUpperCase().indexOf(filter) > -1 ||
                                txtValueIndustry.toUpperCase().indexOf(filter) > -1) {
                                tr[i].style.display = "";
                            } else {
                                tr[i].style.display = "none";
                            }
                        }
                    }
                });
            </script>

</body>


</html>